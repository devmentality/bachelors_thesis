cmake_minimum_required(VERSION 3.9.4)
PROJECT(libron C CXX)
include(FindZLIB)
FIND_PACKAGE(GTest REQUIRED)
FIND_PACKAGE(benchmark REQUIRED)
enable_testing()

set(DEPS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/deps)

set(RYU_DIR ${DEPS_DIR}/ryu)
set(SPAN_DIR ${DEPS_DIR}/span_pro)

include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${RYU_DIR} ${SPAN_DIR})

set(TEST_CXX_FLAGS "-g")
set(TEST_LDD_FLAGS GTest::GTest GTest::Main)
set(FUZZ_CXX_FLAGS $<$<C_COMPILER_ID:Clang>:-g -O2 -fsanitize=fuzzer>)
set(FUZZ_LDD_FLAGS $<$<C_COMPILER_ID:Clang>:-fsanitize=fuzzer>)
set(BENCH_CXX_FLAGS -O3)
set(BENCH_LDD_FLAGS benchmark::benchmark GTest::GTest)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fno-exceptions")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")

list(APPEND RON_HEADERS
        bits.hpp
        utf8.hpp
        const.hpp
        stream.hpp
        status.hpp
        uuid.hpp
        op.hpp
        atom.hpp
        ron.hpp
        protobuf.hpp
        basic-streams.hpp
        oy.hpp
        ron-streams.hpp
        ${RYU_DIR}/ryu/ryu.h
        ${SPAN_DIR}/span.hpp
        )

list(APPEND RON_SOURCES
        ${RON_HEADERS}
        utf8.cpp
        uuid.cpp
        op.cpp
        basic-streams.cpp
        status.cpp
        ron-streams.cpp
        stream.cpp
        poll.cpp
        ${RYU_DIR}/ryu/d2s.c
        ront-parser.cxx # .cxx files are autogenerated
        utf8-parser.cxx
        uuid-parser.cxx
        )

add_library(ron_static STATIC
        ${RON_HEADERS}
        ${RON_SOURCES}
        )
set_property(TARGET ron_static PROPERTY POSITION_INDEPENDENT_CODE TRUE)
target_link_libraries(ron_static z rt)

#  L I B R O N  U N I T  T E S T S

add_executable(test01-uuid test/uuid.cpp)
target_link_libraries(test01-uuid ${TEST_LDD_FLAGS} ron_static)
add_test(UUID test01-uuid)

add_executable(test02-utf8 test/utf8.cpp)
target_link_libraries(test02-utf8 ${TEST_LDD_FLAGS} ron_static)
add_test(UTF8 test02-utf8)

add_executable(test03-ront test/ront.cpp)
target_link_libraries(test03-ront ${TEST_LDD_FLAGS} ron_static)
add_test(RONt test03-ront)

add_executable(test04-ronv test/ronv.cpp)
target_link_libraries(test04-ronv ${TEST_LDD_FLAGS} ron_static)
add_test(RONv test04-ronv)

add_executable(readme test/readme.cpp)
target_link_libraries(readme ${TEST_LDD_FLAGS} ron_static)

#  libron fuzzing

add_executable(fuzz03-ront EXCLUDE_FROM_ALL fuzz/ront.cpp)
target_compile_options(fuzz03-ront PRIVATE ${FUZZ_CXX_FLAGS})
target_link_libraries(fuzz03-ront PRIVATE ${FUZZ_LDD_FLAGS} ron_static)

add_executable(fuzz04-ronv EXCLUDE_FROM_ALL fuzz/ronv.cpp)
target_compile_options(fuzz04-ronv PRIVATE ${FUZZ_CXX_FLAGS})
target_link_libraries(fuzz04-ronv PRIVATE ${FUZZ_LDD_FLAGS} ron_static)
